Q1.
import java.sql.*;
import javax.swing.*;
public class Slip27_1 extends JFrame
{
	public Slip27_1()
	{
		try
		{
			int cnt=0;
			Class.forName("org.postgresql.Driver");
			Connection con= DriverManager.getConnection
			("jdbc:postgresql://localhost:5432/db1","postgres","123");
			String query="SELECT * FROM college";
			Statement st=con.createStatement();
			ResultSet rs=st.executeQuery(query);
			ResultSetMetaData rsm=rs.getMetaData();
			cnt=rsm.getColumnCount();
			Object[][] data = new Object[cnt][4];
			String[] columns = new String[]{"College ID","College Name","College Address","Establishment Year"};
			for(int i=0;i<cnt&rs.next();i++)
			{	
				data[i]=new Object[4];
				data[i][0]=new Integer(rs.getInt(1));
				data[i][1]=(Object)rs.getString(2);
				data[i][2]=(Object)rs.getString(3);
				data[i][3]=new Integer(rs.getInt(4));
			}
			
				JTable table = new JTable(data,columns);
				this.add(new JScrollPane(table));
		}
		catch(Exception e)
		{
			System.out.print(e);
		}
		
		this.setTitle("Table Example");
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setSize(700,500);
		this.setVisible(true);
	}
	
	public static void main(String args[])
	{
		new Slip27_1();
	}
}


Q2.

mport java.util.*;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class MyServlet extends HttpServlet
{
public void doGet(HttpServletRequest req, HttpServletResponse res)
throws ServletException, IOException
{
res.setContentType("text/html");
PrintWriter out = res.getWriter();
// Get the current session object, create one if necessary
HttpSession session = req.getSession();
out.println("<HTML><HEAD><TITLE>SessionTimer</TITLE></HEAD>");
out.println("<BODY><H1>Session Timer<</H1>");
// Display the previous timeout
out.println("The previous timeout was " +
session.getMaxInactiveInterval());
out.println("<BR>");
// Set the new timeout
session.setMaxInactiveInterval(2*60*60); // two hours
// Display the new timeout
out.println("The newly assigned timeout is " + session.getMaxInactiveInterval());
out.println("</BODY></HTML>");
}
}
//xml code
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN" "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">
<web-app>
<servlet><servlet-name>MyServletName</servlet-name>
<servlet-class>MyServlet</servlet-class>
</servlet>
<servlet-mapping><servlet-name>MyServletName</servlet-name>
<url-pattern>/index.html</url-pattern>
</servlet-mapping>
</web-app>
build .xml <project name="MyProject" default="compile" basedir=".">
<property name="sourcedir" value="${basedir}/src"/>
<property name="webdir" value="${basedir}/build"/> <property name="javaSourcedir" value="${sourcedir}/WEB-INF/classes"/>
<property name="webClassdir" value="${webdir}/WEB-INF/classes"/>
<property name="webClassLib" value="${webdir}/WEB-INF/lib"/>
<property name="compileLibDir" value="${basedir}/lib"/>
<path id="libraries">
<fileset dir="${compileLibDir}">
<include name="*.jar"/>
</fileset>
</path>
<target name="clean">
<delete dir="${webdir}"/>
<mkdir dir="${webClassdir}"/>
</target>
<target name="copy">
<copy todir="${webdir}">
<fileset dir="${sourcedir}">
<exclude name="**/*.java"/>
</fileset>
</copy>
</target>
<target name="compile" depends="clean, copy">
<javac srcdir="${javaSourcedir}"
destdir="${webClassdir}"
classpathref="libraries"/>
<!-- one for deployment, another one for reference -->
<war warfile="demo.war" basedir="${webdir}" webxml="${webdir}/WEB-INF/web.xml">
<exclude name="WEB-INF/web.xml"/>
</war>
<war warfile="../demo.war" basedir="${webdir}" webxml="${webdir}/WEB-INF/web.xml">
<exclude name="WEB-INF/web.xml"/>
</war>
<delete dir="${webdir}"/>
</target>
</project>